# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import plugin.plugin_pb2 as plugin__pb2


class PactPluginStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitPlugin = channel.unary_unary(
                '/io.pact.plugin.PactPlugin/InitPlugin',
                request_serializer=plugin__pb2.InitPluginRequest.SerializeToString,
                response_deserializer=plugin__pb2.InitPluginResponse.FromString,
                )
        self.UpdateCatalogue = channel.unary_unary(
                '/io.pact.plugin.PactPlugin/UpdateCatalogue',
                request_serializer=plugin__pb2.Catalogue.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.CompareContents = channel.unary_unary(
                '/io.pact.plugin.PactPlugin/CompareContents',
                request_serializer=plugin__pb2.CompareContentsRequest.SerializeToString,
                response_deserializer=plugin__pb2.CompareContentsResponse.FromString,
                )
        self.ConfigureInteraction = channel.unary_unary(
                '/io.pact.plugin.PactPlugin/ConfigureInteraction',
                request_serializer=plugin__pb2.ConfigureInteractionRequest.SerializeToString,
                response_deserializer=plugin__pb2.ConfigureInteractionResponse.FromString,
                )
        self.GenerateContent = channel.unary_unary(
                '/io.pact.plugin.PactPlugin/GenerateContent',
                request_serializer=plugin__pb2.GenerateContentRequest.SerializeToString,
                response_deserializer=plugin__pb2.GenerateContentResponse.FromString,
                )
        self.StartMockServer = channel.unary_unary(
                '/io.pact.plugin.PactPlugin/StartMockServer',
                request_serializer=plugin__pb2.StartMockServerRequest.SerializeToString,
                response_deserializer=plugin__pb2.StartMockServerResponse.FromString,
                )
        self.ShutdownMockServer = channel.unary_unary(
                '/io.pact.plugin.PactPlugin/ShutdownMockServer',
                request_serializer=plugin__pb2.ShutdownMockServerRequest.SerializeToString,
                response_deserializer=plugin__pb2.ShutdownMockServerResponse.FromString,
                )
        self.GetMockServerResults = channel.unary_unary(
                '/io.pact.plugin.PactPlugin/GetMockServerResults',
                request_serializer=plugin__pb2.MockServerRequest.SerializeToString,
                response_deserializer=plugin__pb2.MockServerResults.FromString,
                )
        self.PrepareInteractionForVerification = channel.unary_unary(
                '/io.pact.plugin.PactPlugin/PrepareInteractionForVerification',
                request_serializer=plugin__pb2.VerificationPreparationRequest.SerializeToString,
                response_deserializer=plugin__pb2.VerificationPreparationResponse.FromString,
                )
        self.VerifyInteraction = channel.unary_unary(
                '/io.pact.plugin.PactPlugin/VerifyInteraction',
                request_serializer=plugin__pb2.VerifyInteractionRequest.SerializeToString,
                response_deserializer=plugin__pb2.VerifyInteractionResponse.FromString,
                )


class PactPluginServicer(object):
    """Missing associated documentation comment in .proto file."""

    def InitPlugin(self, request, context):
        """Check that the plugin loaded OK. Returns the catalogue entries describing what the plugin provides
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCatalogue(self, request, context):
        """Updated catalogue. This will be sent when the core catalogue has been updated (probably by a plugin loading).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompareContents(self, request, context):
        """Request to perform a comparison of some contents (matching request)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureInteraction(self, request, context):
        """Request to configure/setup the interaction for later verification. Data returned will be persisted in the pact file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateContent(self, request, context):
        """Request to generate the content using any defined generators
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartMockServer(self, request, context):
        """Start a mock server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShutdownMockServer(self, request, context):
        """Shutdown a running mock server
        TODO: Replace the message types with MockServerRequest and MockServerResults in the next major version
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMockServerResults(self, request, context):
        """Get the matching results from a running mock server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PrepareInteractionForVerification(self, request, context):
        """Prepare an interaction for verification. This should return any data required to construct any request
        so that it can be amended before the verification is run
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyInteraction(self, request, context):
        """Execute the verification for the interaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PactPluginServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitPlugin': grpc.unary_unary_rpc_method_handler(
                    servicer.InitPlugin,
                    request_deserializer=plugin__pb2.InitPluginRequest.FromString,
                    response_serializer=plugin__pb2.InitPluginResponse.SerializeToString,
            ),
            'UpdateCatalogue': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCatalogue,
                    request_deserializer=plugin__pb2.Catalogue.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'CompareContents': grpc.unary_unary_rpc_method_handler(
                    servicer.CompareContents,
                    request_deserializer=plugin__pb2.CompareContentsRequest.FromString,
                    response_serializer=plugin__pb2.CompareContentsResponse.SerializeToString,
            ),
            'ConfigureInteraction': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureInteraction,
                    request_deserializer=plugin__pb2.ConfigureInteractionRequest.FromString,
                    response_serializer=plugin__pb2.ConfigureInteractionResponse.SerializeToString,
            ),
            'GenerateContent': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateContent,
                    request_deserializer=plugin__pb2.GenerateContentRequest.FromString,
                    response_serializer=plugin__pb2.GenerateContentResponse.SerializeToString,
            ),
            'StartMockServer': grpc.unary_unary_rpc_method_handler(
                    servicer.StartMockServer,
                    request_deserializer=plugin__pb2.StartMockServerRequest.FromString,
                    response_serializer=plugin__pb2.StartMockServerResponse.SerializeToString,
            ),
            'ShutdownMockServer': grpc.unary_unary_rpc_method_handler(
                    servicer.ShutdownMockServer,
                    request_deserializer=plugin__pb2.ShutdownMockServerRequest.FromString,
                    response_serializer=plugin__pb2.ShutdownMockServerResponse.SerializeToString,
            ),
            'GetMockServerResults': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMockServerResults,
                    request_deserializer=plugin__pb2.MockServerRequest.FromString,
                    response_serializer=plugin__pb2.MockServerResults.SerializeToString,
            ),
            'PrepareInteractionForVerification': grpc.unary_unary_rpc_method_handler(
                    servicer.PrepareInteractionForVerification,
                    request_deserializer=plugin__pb2.VerificationPreparationRequest.FromString,
                    response_serializer=plugin__pb2.VerificationPreparationResponse.SerializeToString,
            ),
            'VerifyInteraction': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyInteraction,
                    request_deserializer=plugin__pb2.VerifyInteractionRequest.FromString,
                    response_serializer=plugin__pb2.VerifyInteractionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'io.pact.plugin.PactPlugin', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PactPlugin(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def InitPlugin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io.pact.plugin.PactPlugin/InitPlugin',
            plugin__pb2.InitPluginRequest.SerializeToString,
            plugin__pb2.InitPluginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateCatalogue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io.pact.plugin.PactPlugin/UpdateCatalogue',
            plugin__pb2.Catalogue.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CompareContents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io.pact.plugin.PactPlugin/CompareContents',
            plugin__pb2.CompareContentsRequest.SerializeToString,
            plugin__pb2.CompareContentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureInteraction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io.pact.plugin.PactPlugin/ConfigureInteraction',
            plugin__pb2.ConfigureInteractionRequest.SerializeToString,
            plugin__pb2.ConfigureInteractionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateContent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io.pact.plugin.PactPlugin/GenerateContent',
            plugin__pb2.GenerateContentRequest.SerializeToString,
            plugin__pb2.GenerateContentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartMockServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io.pact.plugin.PactPlugin/StartMockServer',
            plugin__pb2.StartMockServerRequest.SerializeToString,
            plugin__pb2.StartMockServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ShutdownMockServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io.pact.plugin.PactPlugin/ShutdownMockServer',
            plugin__pb2.ShutdownMockServerRequest.SerializeToString,
            plugin__pb2.ShutdownMockServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMockServerResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io.pact.plugin.PactPlugin/GetMockServerResults',
            plugin__pb2.MockServerRequest.SerializeToString,
            plugin__pb2.MockServerResults.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PrepareInteractionForVerification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io.pact.plugin.PactPlugin/PrepareInteractionForVerification',
            plugin__pb2.VerificationPreparationRequest.SerializeToString,
            plugin__pb2.VerificationPreparationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyInteraction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io.pact.plugin.PactPlugin/VerifyInteraction',
            plugin__pb2.VerifyInteractionRequest.SerializeToString,
            plugin__pb2.VerifyInteractionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
