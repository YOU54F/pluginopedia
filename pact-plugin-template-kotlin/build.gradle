import java.nio.file.Paths

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.5.30'
    id 'application'
    id 'com.google.protobuf' version '0.8.14'
    id 'groovy'
}

version = '0.0.0'
targetCompatibility = '11'
sourceCompatibility = '11'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation platform('org.jetbrains.kotlin:kotlin-bom')
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.5.31'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-jdk9:1.5.2'
    implementation 'io.grpc:grpc-protobuf:1.41.0'
    implementation 'io.grpc:grpc-stub:1.41.0'
    implementation 'io.grpc:grpc-netty:1.41.0'
    implementation "io.grpc:grpc-kotlin-stub:1.1.0"
    implementation "javax.annotation:javax.annotation-api:1.3.2"
    implementation('io.github.microutils:kotlin-logging:2.0.11') {
        exclude group: 'org.jetbrains.kotlin'
    }
    implementation('com.michael-bull.kotlin-result:kotlin-result:1.1.12') {
        exclude group: 'org.jetbrains.kotlin'
    }
    implementation 'au.com.dius.pact.core:support:4.3.2'
    implementation 'au.com.dius.pact.core:model:4.3.2'
    implementation 'au.com.dius.pact.core:matchers:4.3.2'
    implementation 'com.google.protobuf:protobuf-java:3.18.0'
    implementation 'ch.qos.logback:logback-classic:1.2.6'
    implementation 'com.github.os72:protoc-jar:3.11.4'
    implementation "io.pact.plugin.driver:core:0.0.9"
    implementation "org.apache.commons:commons-lang3:3.12.0"
    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation 'org.apache.tika:tika-core:1.27'

    // You'll need to change the location, if you move your proto
    protobuf files('plugin.proto')

    testImplementation "org.codehaus.groovy:groovy:3.0.8"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.8.1'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation('org.spockframework:spock-core:2.0-groovy-3.0') {
        exclude group: 'org.codehaus.groovy'
    }
    testImplementation 'net.bytebuddy:byte-buddy:1.11.18'
    testImplementation 'org.objenesis:objenesis:3.2'
}

application {
    mainClass = 'io.pact.protobuf.plugin.PluginAppKt'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "11"
    }
}

test {
    useJUnitPlatform()
}

protobuf {
    // protoc { artifact = "com.google.protobuf:protoc:3.18.1:osx-x86_64" } // enabled for M1 Mac users
    protoc { artifact = "com.google.protobuf:protoc:3.18.1" } // Uncomment this on other platforms
    plugins {
        // grpc { artifact = "io.grpc:protoc-gen-grpc-java:1.40.1:osx-x86_64" } // enabled for M1 Mac users
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:1.40.1" } // Uncomment this on other platforms
        grpckt { artifact = "io.grpc:protoc-gen-grpc-kotlin:1.1.0:jdk7@jar" }
    }
    generateProtoTasks {
        all()*.plugins {
          grpc {}
          grpckt {}
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
        kotlin {
            srcDirs 'build/generated/source/proto/main/grpckt'
        }
    }
}

tasks.register('unpackDist', Copy) {
    dependsOn tasks.build
    from zipTree("${project.buildDir}/distributions/pact-protobuf-plugin-${project.version}.zip")
    eachFile { fcd ->
        fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(1))
    }
    into file(Paths.get(System.getProperty('user.home')).resolve(".pact/plugins/protobuf-${project.version}"))
}

tasks.register('copyManifest', Copy) {
    from 'pact-plugin.json'
    into file(Paths.get(System.getProperty('user.home')).resolve(".pact/plugins/protobuf-${project.version}"))
}

tasks.register('installLocal') {
    dependsOn 'unpackDist', 'copyManifest'
}
