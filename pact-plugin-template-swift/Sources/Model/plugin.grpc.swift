//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: Sources/Model/plugin.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Io_Pact_Plugin_PactPluginClient`, then call methods of this protocol to make API calls.
public protocol Io_Pact_Plugin_PactPluginClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Io_Pact_Plugin_PactPluginClientInterceptorFactoryProtocol? { get }

  func initPlugin(
    _ request: Io_Pact_Plugin_InitPluginRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Io_Pact_Plugin_InitPluginRequest, Io_Pact_Plugin_InitPluginResponse>

  func updateCatalogue(
    _ request: Io_Pact_Plugin_Catalogue,
    callOptions: CallOptions?
  ) -> UnaryCall<Io_Pact_Plugin_Catalogue, SwiftProtobuf.Google_Protobuf_Empty>

  func compareContents(
    _ request: Io_Pact_Plugin_CompareContentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Io_Pact_Plugin_CompareContentsRequest, Io_Pact_Plugin_CompareContentsResponse>

  func configureInteraction(
    _ request: Io_Pact_Plugin_ConfigureInteractionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Io_Pact_Plugin_ConfigureInteractionRequest, Io_Pact_Plugin_ConfigureInteractionResponse>

  func generateContent(
    _ request: Io_Pact_Plugin_GenerateContentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Io_Pact_Plugin_GenerateContentRequest, Io_Pact_Plugin_GenerateContentResponse>

  func startMockServer(
    _ request: Io_Pact_Plugin_StartMockServerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Io_Pact_Plugin_StartMockServerRequest, Io_Pact_Plugin_StartMockServerResponse>

  func shutdownMockServer(
    _ request: Io_Pact_Plugin_ShutdownMockServerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Io_Pact_Plugin_ShutdownMockServerRequest, Io_Pact_Plugin_ShutdownMockServerResponse>

  func getMockServerResults(
    _ request: Io_Pact_Plugin_MockServerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Io_Pact_Plugin_MockServerRequest, Io_Pact_Plugin_MockServerResults>

  func prepareInteractionForVerification(
    _ request: Io_Pact_Plugin_VerificationPreparationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Io_Pact_Plugin_VerificationPreparationRequest, Io_Pact_Plugin_VerificationPreparationResponse>

  func verifyInteraction(
    _ request: Io_Pact_Plugin_VerifyInteractionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Io_Pact_Plugin_VerifyInteractionRequest, Io_Pact_Plugin_VerifyInteractionResponse>
}

extension Io_Pact_Plugin_PactPluginClientProtocol {
  public var serviceName: String {
    return "io.pact.plugin.PactPlugin"
  }

  /// Check that the plugin loaded OK. Returns the catalogue entries describing what the plugin provides
  ///
  /// - Parameters:
  ///   - request: Request to send to InitPlugin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func initPlugin(
    _ request: Io_Pact_Plugin_InitPluginRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Io_Pact_Plugin_InitPluginRequest, Io_Pact_Plugin_InitPluginResponse> {
    return self.makeUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.initPlugin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInitPluginInterceptors() ?? []
    )
  }

  /// Updated catalogue. This will be sent when the core catalogue has been updated (probably by a plugin loading).
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateCatalogue.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateCatalogue(
    _ request: Io_Pact_Plugin_Catalogue,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Io_Pact_Plugin_Catalogue, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.updateCatalogue.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateCatalogueInterceptors() ?? []
    )
  }

  /// Request to perform a comparison of some contents (matching request)
  ///
  /// - Parameters:
  ///   - request: Request to send to CompareContents.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func compareContents(
    _ request: Io_Pact_Plugin_CompareContentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Io_Pact_Plugin_CompareContentsRequest, Io_Pact_Plugin_CompareContentsResponse> {
    return self.makeUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.compareContents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCompareContentsInterceptors() ?? []
    )
  }

  /// Request to configure/setup the interaction for later verification. Data returned will be persisted in the pact file.
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfigureInteraction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func configureInteraction(
    _ request: Io_Pact_Plugin_ConfigureInteractionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Io_Pact_Plugin_ConfigureInteractionRequest, Io_Pact_Plugin_ConfigureInteractionResponse> {
    return self.makeUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.configureInteraction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigureInteractionInterceptors() ?? []
    )
  }

  /// Request to generate the content using any defined generators
  ///
  /// - Parameters:
  ///   - request: Request to send to GenerateContent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func generateContent(
    _ request: Io_Pact_Plugin_GenerateContentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Io_Pact_Plugin_GenerateContentRequest, Io_Pact_Plugin_GenerateContentResponse> {
    return self.makeUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.generateContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateContentInterceptors() ?? []
    )
  }

  /// Start a mock server
  ///
  /// - Parameters:
  ///   - request: Request to send to StartMockServer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func startMockServer(
    _ request: Io_Pact_Plugin_StartMockServerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Io_Pact_Plugin_StartMockServerRequest, Io_Pact_Plugin_StartMockServerResponse> {
    return self.makeUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.startMockServer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartMockServerInterceptors() ?? []
    )
  }

  /// Shutdown a running mock server
  /// TODO: Replace the message types with MockServerRequest and MockServerResults in the next major version
  ///
  /// - Parameters:
  ///   - request: Request to send to ShutdownMockServer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func shutdownMockServer(
    _ request: Io_Pact_Plugin_ShutdownMockServerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Io_Pact_Plugin_ShutdownMockServerRequest, Io_Pact_Plugin_ShutdownMockServerResponse> {
    return self.makeUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.shutdownMockServer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeShutdownMockServerInterceptors() ?? []
    )
  }

  /// Get the matching results from a running mock server
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMockServerResults.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getMockServerResults(
    _ request: Io_Pact_Plugin_MockServerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Io_Pact_Plugin_MockServerRequest, Io_Pact_Plugin_MockServerResults> {
    return self.makeUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.getMockServerResults.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMockServerResultsInterceptors() ?? []
    )
  }

  /// Prepare an interaction for verification. This should return any data required to construct any request
  /// so that it can be amended before the verification is run
  ///
  /// - Parameters:
  ///   - request: Request to send to PrepareInteractionForVerification.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func prepareInteractionForVerification(
    _ request: Io_Pact_Plugin_VerificationPreparationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Io_Pact_Plugin_VerificationPreparationRequest, Io_Pact_Plugin_VerificationPreparationResponse> {
    return self.makeUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.prepareInteractionForVerification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePrepareInteractionForVerificationInterceptors() ?? []
    )
  }

  /// Execute the verification for the interaction.
  ///
  /// - Parameters:
  ///   - request: Request to send to VerifyInteraction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func verifyInteraction(
    _ request: Io_Pact_Plugin_VerifyInteractionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Io_Pact_Plugin_VerifyInteractionRequest, Io_Pact_Plugin_VerifyInteractionResponse> {
    return self.makeUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.verifyInteraction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVerifyInteractionInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Io_Pact_Plugin_PactPluginClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Io_Pact_Plugin_PactPluginNIOClient")
public final class Io_Pact_Plugin_PactPluginClient: Io_Pact_Plugin_PactPluginClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Io_Pact_Plugin_PactPluginClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Io_Pact_Plugin_PactPluginClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the io.pact.plugin.PactPlugin service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Io_Pact_Plugin_PactPluginClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Io_Pact_Plugin_PactPluginNIOClient: Io_Pact_Plugin_PactPluginClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Io_Pact_Plugin_PactPluginClientInterceptorFactoryProtocol?

  /// Creates a client for the io.pact.plugin.PactPlugin service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Io_Pact_Plugin_PactPluginClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Io_Pact_Plugin_PactPluginAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Io_Pact_Plugin_PactPluginClientInterceptorFactoryProtocol? { get }

  func makeInitPluginCall(
    _ request: Io_Pact_Plugin_InitPluginRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Io_Pact_Plugin_InitPluginRequest, Io_Pact_Plugin_InitPluginResponse>

  func makeUpdateCatalogueCall(
    _ request: Io_Pact_Plugin_Catalogue,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Io_Pact_Plugin_Catalogue, SwiftProtobuf.Google_Protobuf_Empty>

  func makeCompareContentsCall(
    _ request: Io_Pact_Plugin_CompareContentsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Io_Pact_Plugin_CompareContentsRequest, Io_Pact_Plugin_CompareContentsResponse>

  func makeConfigureInteractionCall(
    _ request: Io_Pact_Plugin_ConfigureInteractionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Io_Pact_Plugin_ConfigureInteractionRequest, Io_Pact_Plugin_ConfigureInteractionResponse>

  func makeGenerateContentCall(
    _ request: Io_Pact_Plugin_GenerateContentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Io_Pact_Plugin_GenerateContentRequest, Io_Pact_Plugin_GenerateContentResponse>

  func makeStartMockServerCall(
    _ request: Io_Pact_Plugin_StartMockServerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Io_Pact_Plugin_StartMockServerRequest, Io_Pact_Plugin_StartMockServerResponse>

  func makeShutdownMockServerCall(
    _ request: Io_Pact_Plugin_ShutdownMockServerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Io_Pact_Plugin_ShutdownMockServerRequest, Io_Pact_Plugin_ShutdownMockServerResponse>

  func makeGetMockServerResultsCall(
    _ request: Io_Pact_Plugin_MockServerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Io_Pact_Plugin_MockServerRequest, Io_Pact_Plugin_MockServerResults>

  func makePrepareInteractionForVerificationCall(
    _ request: Io_Pact_Plugin_VerificationPreparationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Io_Pact_Plugin_VerificationPreparationRequest, Io_Pact_Plugin_VerificationPreparationResponse>

  func makeVerifyInteractionCall(
    _ request: Io_Pact_Plugin_VerifyInteractionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Io_Pact_Plugin_VerifyInteractionRequest, Io_Pact_Plugin_VerifyInteractionResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Io_Pact_Plugin_PactPluginAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Io_Pact_Plugin_PactPluginClientMetadata.serviceDescriptor
  }

  public var interceptors: Io_Pact_Plugin_PactPluginClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeInitPluginCall(
    _ request: Io_Pact_Plugin_InitPluginRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Io_Pact_Plugin_InitPluginRequest, Io_Pact_Plugin_InitPluginResponse> {
    return self.makeAsyncUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.initPlugin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInitPluginInterceptors() ?? []
    )
  }

  public func makeUpdateCatalogueCall(
    _ request: Io_Pact_Plugin_Catalogue,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Io_Pact_Plugin_Catalogue, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.updateCatalogue.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateCatalogueInterceptors() ?? []
    )
  }

  public func makeCompareContentsCall(
    _ request: Io_Pact_Plugin_CompareContentsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Io_Pact_Plugin_CompareContentsRequest, Io_Pact_Plugin_CompareContentsResponse> {
    return self.makeAsyncUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.compareContents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCompareContentsInterceptors() ?? []
    )
  }

  public func makeConfigureInteractionCall(
    _ request: Io_Pact_Plugin_ConfigureInteractionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Io_Pact_Plugin_ConfigureInteractionRequest, Io_Pact_Plugin_ConfigureInteractionResponse> {
    return self.makeAsyncUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.configureInteraction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigureInteractionInterceptors() ?? []
    )
  }

  public func makeGenerateContentCall(
    _ request: Io_Pact_Plugin_GenerateContentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Io_Pact_Plugin_GenerateContentRequest, Io_Pact_Plugin_GenerateContentResponse> {
    return self.makeAsyncUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.generateContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateContentInterceptors() ?? []
    )
  }

  public func makeStartMockServerCall(
    _ request: Io_Pact_Plugin_StartMockServerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Io_Pact_Plugin_StartMockServerRequest, Io_Pact_Plugin_StartMockServerResponse> {
    return self.makeAsyncUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.startMockServer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartMockServerInterceptors() ?? []
    )
  }

  public func makeShutdownMockServerCall(
    _ request: Io_Pact_Plugin_ShutdownMockServerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Io_Pact_Plugin_ShutdownMockServerRequest, Io_Pact_Plugin_ShutdownMockServerResponse> {
    return self.makeAsyncUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.shutdownMockServer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeShutdownMockServerInterceptors() ?? []
    )
  }

  public func makeGetMockServerResultsCall(
    _ request: Io_Pact_Plugin_MockServerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Io_Pact_Plugin_MockServerRequest, Io_Pact_Plugin_MockServerResults> {
    return self.makeAsyncUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.getMockServerResults.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMockServerResultsInterceptors() ?? []
    )
  }

  public func makePrepareInteractionForVerificationCall(
    _ request: Io_Pact_Plugin_VerificationPreparationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Io_Pact_Plugin_VerificationPreparationRequest, Io_Pact_Plugin_VerificationPreparationResponse> {
    return self.makeAsyncUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.prepareInteractionForVerification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePrepareInteractionForVerificationInterceptors() ?? []
    )
  }

  public func makeVerifyInteractionCall(
    _ request: Io_Pact_Plugin_VerifyInteractionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Io_Pact_Plugin_VerifyInteractionRequest, Io_Pact_Plugin_VerifyInteractionResponse> {
    return self.makeAsyncUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.verifyInteraction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVerifyInteractionInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Io_Pact_Plugin_PactPluginAsyncClientProtocol {
  public func initPlugin(
    _ request: Io_Pact_Plugin_InitPluginRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Io_Pact_Plugin_InitPluginResponse {
    return try await self.performAsyncUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.initPlugin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInitPluginInterceptors() ?? []
    )
  }

  public func updateCatalogue(
    _ request: Io_Pact_Plugin_Catalogue,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.updateCatalogue.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateCatalogueInterceptors() ?? []
    )
  }

  public func compareContents(
    _ request: Io_Pact_Plugin_CompareContentsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Io_Pact_Plugin_CompareContentsResponse {
    return try await self.performAsyncUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.compareContents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCompareContentsInterceptors() ?? []
    )
  }

  public func configureInteraction(
    _ request: Io_Pact_Plugin_ConfigureInteractionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Io_Pact_Plugin_ConfigureInteractionResponse {
    return try await self.performAsyncUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.configureInteraction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfigureInteractionInterceptors() ?? []
    )
  }

  public func generateContent(
    _ request: Io_Pact_Plugin_GenerateContentRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Io_Pact_Plugin_GenerateContentResponse {
    return try await self.performAsyncUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.generateContent.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateContentInterceptors() ?? []
    )
  }

  public func startMockServer(
    _ request: Io_Pact_Plugin_StartMockServerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Io_Pact_Plugin_StartMockServerResponse {
    return try await self.performAsyncUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.startMockServer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartMockServerInterceptors() ?? []
    )
  }

  public func shutdownMockServer(
    _ request: Io_Pact_Plugin_ShutdownMockServerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Io_Pact_Plugin_ShutdownMockServerResponse {
    return try await self.performAsyncUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.shutdownMockServer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeShutdownMockServerInterceptors() ?? []
    )
  }

  public func getMockServerResults(
    _ request: Io_Pact_Plugin_MockServerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Io_Pact_Plugin_MockServerResults {
    return try await self.performAsyncUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.getMockServerResults.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMockServerResultsInterceptors() ?? []
    )
  }

  public func prepareInteractionForVerification(
    _ request: Io_Pact_Plugin_VerificationPreparationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Io_Pact_Plugin_VerificationPreparationResponse {
    return try await self.performAsyncUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.prepareInteractionForVerification.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePrepareInteractionForVerificationInterceptors() ?? []
    )
  }

  public func verifyInteraction(
    _ request: Io_Pact_Plugin_VerifyInteractionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Io_Pact_Plugin_VerifyInteractionResponse {
    return try await self.performAsyncUnaryCall(
      path: Io_Pact_Plugin_PactPluginClientMetadata.Methods.verifyInteraction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVerifyInteractionInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Io_Pact_Plugin_PactPluginAsyncClient: Io_Pact_Plugin_PactPluginAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Io_Pact_Plugin_PactPluginClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Io_Pact_Plugin_PactPluginClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Io_Pact_Plugin_PactPluginClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'initPlugin'.
  func makeInitPluginInterceptors() -> [ClientInterceptor<Io_Pact_Plugin_InitPluginRequest, Io_Pact_Plugin_InitPluginResponse>]

  /// - Returns: Interceptors to use when invoking 'updateCatalogue'.
  func makeUpdateCatalogueInterceptors() -> [ClientInterceptor<Io_Pact_Plugin_Catalogue, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'compareContents'.
  func makeCompareContentsInterceptors() -> [ClientInterceptor<Io_Pact_Plugin_CompareContentsRequest, Io_Pact_Plugin_CompareContentsResponse>]

  /// - Returns: Interceptors to use when invoking 'configureInteraction'.
  func makeConfigureInteractionInterceptors() -> [ClientInterceptor<Io_Pact_Plugin_ConfigureInteractionRequest, Io_Pact_Plugin_ConfigureInteractionResponse>]

  /// - Returns: Interceptors to use when invoking 'generateContent'.
  func makeGenerateContentInterceptors() -> [ClientInterceptor<Io_Pact_Plugin_GenerateContentRequest, Io_Pact_Plugin_GenerateContentResponse>]

  /// - Returns: Interceptors to use when invoking 'startMockServer'.
  func makeStartMockServerInterceptors() -> [ClientInterceptor<Io_Pact_Plugin_StartMockServerRequest, Io_Pact_Plugin_StartMockServerResponse>]

  /// - Returns: Interceptors to use when invoking 'shutdownMockServer'.
  func makeShutdownMockServerInterceptors() -> [ClientInterceptor<Io_Pact_Plugin_ShutdownMockServerRequest, Io_Pact_Plugin_ShutdownMockServerResponse>]

  /// - Returns: Interceptors to use when invoking 'getMockServerResults'.
  func makeGetMockServerResultsInterceptors() -> [ClientInterceptor<Io_Pact_Plugin_MockServerRequest, Io_Pact_Plugin_MockServerResults>]

  /// - Returns: Interceptors to use when invoking 'prepareInteractionForVerification'.
  func makePrepareInteractionForVerificationInterceptors() -> [ClientInterceptor<Io_Pact_Plugin_VerificationPreparationRequest, Io_Pact_Plugin_VerificationPreparationResponse>]

  /// - Returns: Interceptors to use when invoking 'verifyInteraction'.
  func makeVerifyInteractionInterceptors() -> [ClientInterceptor<Io_Pact_Plugin_VerifyInteractionRequest, Io_Pact_Plugin_VerifyInteractionResponse>]
}

public enum Io_Pact_Plugin_PactPluginClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "PactPlugin",
    fullName: "io.pact.plugin.PactPlugin",
    methods: [
      Io_Pact_Plugin_PactPluginClientMetadata.Methods.initPlugin,
      Io_Pact_Plugin_PactPluginClientMetadata.Methods.updateCatalogue,
      Io_Pact_Plugin_PactPluginClientMetadata.Methods.compareContents,
      Io_Pact_Plugin_PactPluginClientMetadata.Methods.configureInteraction,
      Io_Pact_Plugin_PactPluginClientMetadata.Methods.generateContent,
      Io_Pact_Plugin_PactPluginClientMetadata.Methods.startMockServer,
      Io_Pact_Plugin_PactPluginClientMetadata.Methods.shutdownMockServer,
      Io_Pact_Plugin_PactPluginClientMetadata.Methods.getMockServerResults,
      Io_Pact_Plugin_PactPluginClientMetadata.Methods.prepareInteractionForVerification,
      Io_Pact_Plugin_PactPluginClientMetadata.Methods.verifyInteraction,
    ]
  )

  public enum Methods {
    public static let initPlugin = GRPCMethodDescriptor(
      name: "InitPlugin",
      path: "/io.pact.plugin.PactPlugin/InitPlugin",
      type: GRPCCallType.unary
    )

    public static let updateCatalogue = GRPCMethodDescriptor(
      name: "UpdateCatalogue",
      path: "/io.pact.plugin.PactPlugin/UpdateCatalogue",
      type: GRPCCallType.unary
    )

    public static let compareContents = GRPCMethodDescriptor(
      name: "CompareContents",
      path: "/io.pact.plugin.PactPlugin/CompareContents",
      type: GRPCCallType.unary
    )

    public static let configureInteraction = GRPCMethodDescriptor(
      name: "ConfigureInteraction",
      path: "/io.pact.plugin.PactPlugin/ConfigureInteraction",
      type: GRPCCallType.unary
    )

    public static let generateContent = GRPCMethodDescriptor(
      name: "GenerateContent",
      path: "/io.pact.plugin.PactPlugin/GenerateContent",
      type: GRPCCallType.unary
    )

    public static let startMockServer = GRPCMethodDescriptor(
      name: "StartMockServer",
      path: "/io.pact.plugin.PactPlugin/StartMockServer",
      type: GRPCCallType.unary
    )

    public static let shutdownMockServer = GRPCMethodDescriptor(
      name: "ShutdownMockServer",
      path: "/io.pact.plugin.PactPlugin/ShutdownMockServer",
      type: GRPCCallType.unary
    )

    public static let getMockServerResults = GRPCMethodDescriptor(
      name: "GetMockServerResults",
      path: "/io.pact.plugin.PactPlugin/GetMockServerResults",
      type: GRPCCallType.unary
    )

    public static let prepareInteractionForVerification = GRPCMethodDescriptor(
      name: "PrepareInteractionForVerification",
      path: "/io.pact.plugin.PactPlugin/PrepareInteractionForVerification",
      type: GRPCCallType.unary
    )

    public static let verifyInteraction = GRPCMethodDescriptor(
      name: "VerifyInteraction",
      path: "/io.pact.plugin.PactPlugin/VerifyInteraction",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Io_Pact_Plugin_PactPluginProvider: CallHandlerProvider {
  var interceptors: Io_Pact_Plugin_PactPluginServerInterceptorFactoryProtocol? { get }

  /// Check that the plugin loaded OK. Returns the catalogue entries describing what the plugin provides
  func initPlugin(request: Io_Pact_Plugin_InitPluginRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Io_Pact_Plugin_InitPluginResponse>

  /// Updated catalogue. This will be sent when the core catalogue has been updated (probably by a plugin loading).
  func updateCatalogue(request: Io_Pact_Plugin_Catalogue, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// Request to perform a comparison of some contents (matching request)
  func compareContents(request: Io_Pact_Plugin_CompareContentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Io_Pact_Plugin_CompareContentsResponse>

  /// Request to configure/setup the interaction for later verification. Data returned will be persisted in the pact file.
  func configureInteraction(request: Io_Pact_Plugin_ConfigureInteractionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Io_Pact_Plugin_ConfigureInteractionResponse>

  /// Request to generate the content using any defined generators
  func generateContent(request: Io_Pact_Plugin_GenerateContentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Io_Pact_Plugin_GenerateContentResponse>

  /// Start a mock server
  func startMockServer(request: Io_Pact_Plugin_StartMockServerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Io_Pact_Plugin_StartMockServerResponse>

  /// Shutdown a running mock server
  /// TODO: Replace the message types with MockServerRequest and MockServerResults in the next major version
  func shutdownMockServer(request: Io_Pact_Plugin_ShutdownMockServerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Io_Pact_Plugin_ShutdownMockServerResponse>

  /// Get the matching results from a running mock server
  func getMockServerResults(request: Io_Pact_Plugin_MockServerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Io_Pact_Plugin_MockServerResults>

  /// Prepare an interaction for verification. This should return any data required to construct any request
  /// so that it can be amended before the verification is run
  func prepareInteractionForVerification(request: Io_Pact_Plugin_VerificationPreparationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Io_Pact_Plugin_VerificationPreparationResponse>

  /// Execute the verification for the interaction.
  func verifyInteraction(request: Io_Pact_Plugin_VerifyInteractionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Io_Pact_Plugin_VerifyInteractionResponse>
}

extension Io_Pact_Plugin_PactPluginProvider {
  public var serviceName: Substring {
    return Io_Pact_Plugin_PactPluginServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "InitPlugin":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Io_Pact_Plugin_InitPluginRequest>(),
        responseSerializer: ProtobufSerializer<Io_Pact_Plugin_InitPluginResponse>(),
        interceptors: self.interceptors?.makeInitPluginInterceptors() ?? [],
        userFunction: self.initPlugin(request:context:)
      )

    case "UpdateCatalogue":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Io_Pact_Plugin_Catalogue>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUpdateCatalogueInterceptors() ?? [],
        userFunction: self.updateCatalogue(request:context:)
      )

    case "CompareContents":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Io_Pact_Plugin_CompareContentsRequest>(),
        responseSerializer: ProtobufSerializer<Io_Pact_Plugin_CompareContentsResponse>(),
        interceptors: self.interceptors?.makeCompareContentsInterceptors() ?? [],
        userFunction: self.compareContents(request:context:)
      )

    case "ConfigureInteraction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Io_Pact_Plugin_ConfigureInteractionRequest>(),
        responseSerializer: ProtobufSerializer<Io_Pact_Plugin_ConfigureInteractionResponse>(),
        interceptors: self.interceptors?.makeConfigureInteractionInterceptors() ?? [],
        userFunction: self.configureInteraction(request:context:)
      )

    case "GenerateContent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Io_Pact_Plugin_GenerateContentRequest>(),
        responseSerializer: ProtobufSerializer<Io_Pact_Plugin_GenerateContentResponse>(),
        interceptors: self.interceptors?.makeGenerateContentInterceptors() ?? [],
        userFunction: self.generateContent(request:context:)
      )

    case "StartMockServer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Io_Pact_Plugin_StartMockServerRequest>(),
        responseSerializer: ProtobufSerializer<Io_Pact_Plugin_StartMockServerResponse>(),
        interceptors: self.interceptors?.makeStartMockServerInterceptors() ?? [],
        userFunction: self.startMockServer(request:context:)
      )

    case "ShutdownMockServer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Io_Pact_Plugin_ShutdownMockServerRequest>(),
        responseSerializer: ProtobufSerializer<Io_Pact_Plugin_ShutdownMockServerResponse>(),
        interceptors: self.interceptors?.makeShutdownMockServerInterceptors() ?? [],
        userFunction: self.shutdownMockServer(request:context:)
      )

    case "GetMockServerResults":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Io_Pact_Plugin_MockServerRequest>(),
        responseSerializer: ProtobufSerializer<Io_Pact_Plugin_MockServerResults>(),
        interceptors: self.interceptors?.makeGetMockServerResultsInterceptors() ?? [],
        userFunction: self.getMockServerResults(request:context:)
      )

    case "PrepareInteractionForVerification":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Io_Pact_Plugin_VerificationPreparationRequest>(),
        responseSerializer: ProtobufSerializer<Io_Pact_Plugin_VerificationPreparationResponse>(),
        interceptors: self.interceptors?.makePrepareInteractionForVerificationInterceptors() ?? [],
        userFunction: self.prepareInteractionForVerification(request:context:)
      )

    case "VerifyInteraction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Io_Pact_Plugin_VerifyInteractionRequest>(),
        responseSerializer: ProtobufSerializer<Io_Pact_Plugin_VerifyInteractionResponse>(),
        interceptors: self.interceptors?.makeVerifyInteractionInterceptors() ?? [],
        userFunction: self.verifyInteraction(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Io_Pact_Plugin_PactPluginAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Io_Pact_Plugin_PactPluginServerInterceptorFactoryProtocol? { get }

  /// Check that the plugin loaded OK. Returns the catalogue entries describing what the plugin provides
  @Sendable func initPlugin(
    request: Io_Pact_Plugin_InitPluginRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Io_Pact_Plugin_InitPluginResponse

  /// Updated catalogue. This will be sent when the core catalogue has been updated (probably by a plugin loading).
  @Sendable func updateCatalogue(
    request: Io_Pact_Plugin_Catalogue,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  /// Request to perform a comparison of some contents (matching request)
  @Sendable func compareContents(
    request: Io_Pact_Plugin_CompareContentsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Io_Pact_Plugin_CompareContentsResponse

  /// Request to configure/setup the interaction for later verification. Data returned will be persisted in the pact file.
  @Sendable func configureInteraction(
    request: Io_Pact_Plugin_ConfigureInteractionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Io_Pact_Plugin_ConfigureInteractionResponse

  /// Request to generate the content using any defined generators
  @Sendable func generateContent(
    request: Io_Pact_Plugin_GenerateContentRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Io_Pact_Plugin_GenerateContentResponse

  /// Start a mock server
  @Sendable func startMockServer(
    request: Io_Pact_Plugin_StartMockServerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Io_Pact_Plugin_StartMockServerResponse

  /// Shutdown a running mock server
  /// TODO: Replace the message types with MockServerRequest and MockServerResults in the next major version
  @Sendable func shutdownMockServer(
    request: Io_Pact_Plugin_ShutdownMockServerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Io_Pact_Plugin_ShutdownMockServerResponse

  /// Get the matching results from a running mock server
  @Sendable func getMockServerResults(
    request: Io_Pact_Plugin_MockServerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Io_Pact_Plugin_MockServerResults

  /// Prepare an interaction for verification. This should return any data required to construct any request
  /// so that it can be amended before the verification is run
  @Sendable func prepareInteractionForVerification(
    request: Io_Pact_Plugin_VerificationPreparationRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Io_Pact_Plugin_VerificationPreparationResponse

  /// Execute the verification for the interaction.
  @Sendable func verifyInteraction(
    request: Io_Pact_Plugin_VerifyInteractionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Io_Pact_Plugin_VerifyInteractionResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Io_Pact_Plugin_PactPluginAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Io_Pact_Plugin_PactPluginServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Io_Pact_Plugin_PactPluginServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Io_Pact_Plugin_PactPluginServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "InitPlugin":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Io_Pact_Plugin_InitPluginRequest>(),
        responseSerializer: ProtobufSerializer<Io_Pact_Plugin_InitPluginResponse>(),
        interceptors: self.interceptors?.makeInitPluginInterceptors() ?? [],
        wrapping: self.initPlugin(request:context:)
      )

    case "UpdateCatalogue":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Io_Pact_Plugin_Catalogue>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUpdateCatalogueInterceptors() ?? [],
        wrapping: self.updateCatalogue(request:context:)
      )

    case "CompareContents":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Io_Pact_Plugin_CompareContentsRequest>(),
        responseSerializer: ProtobufSerializer<Io_Pact_Plugin_CompareContentsResponse>(),
        interceptors: self.interceptors?.makeCompareContentsInterceptors() ?? [],
        wrapping: self.compareContents(request:context:)
      )

    case "ConfigureInteraction":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Io_Pact_Plugin_ConfigureInteractionRequest>(),
        responseSerializer: ProtobufSerializer<Io_Pact_Plugin_ConfigureInteractionResponse>(),
        interceptors: self.interceptors?.makeConfigureInteractionInterceptors() ?? [],
        wrapping: self.configureInteraction(request:context:)
      )

    case "GenerateContent":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Io_Pact_Plugin_GenerateContentRequest>(),
        responseSerializer: ProtobufSerializer<Io_Pact_Plugin_GenerateContentResponse>(),
        interceptors: self.interceptors?.makeGenerateContentInterceptors() ?? [],
        wrapping: self.generateContent(request:context:)
      )

    case "StartMockServer":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Io_Pact_Plugin_StartMockServerRequest>(),
        responseSerializer: ProtobufSerializer<Io_Pact_Plugin_StartMockServerResponse>(),
        interceptors: self.interceptors?.makeStartMockServerInterceptors() ?? [],
        wrapping: self.startMockServer(request:context:)
      )

    case "ShutdownMockServer":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Io_Pact_Plugin_ShutdownMockServerRequest>(),
        responseSerializer: ProtobufSerializer<Io_Pact_Plugin_ShutdownMockServerResponse>(),
        interceptors: self.interceptors?.makeShutdownMockServerInterceptors() ?? [],
        wrapping: self.shutdownMockServer(request:context:)
      )

    case "GetMockServerResults":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Io_Pact_Plugin_MockServerRequest>(),
        responseSerializer: ProtobufSerializer<Io_Pact_Plugin_MockServerResults>(),
        interceptors: self.interceptors?.makeGetMockServerResultsInterceptors() ?? [],
        wrapping: self.getMockServerResults(request:context:)
      )

    case "PrepareInteractionForVerification":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Io_Pact_Plugin_VerificationPreparationRequest>(),
        responseSerializer: ProtobufSerializer<Io_Pact_Plugin_VerificationPreparationResponse>(),
        interceptors: self.interceptors?.makePrepareInteractionForVerificationInterceptors() ?? [],
        wrapping: self.prepareInteractionForVerification(request:context:)
      )

    case "VerifyInteraction":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Io_Pact_Plugin_VerifyInteractionRequest>(),
        responseSerializer: ProtobufSerializer<Io_Pact_Plugin_VerifyInteractionResponse>(),
        interceptors: self.interceptors?.makeVerifyInteractionInterceptors() ?? [],
        wrapping: self.verifyInteraction(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol Io_Pact_Plugin_PactPluginServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'initPlugin'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeInitPluginInterceptors() -> [ServerInterceptor<Io_Pact_Plugin_InitPluginRequest, Io_Pact_Plugin_InitPluginResponse>]

  /// - Returns: Interceptors to use when handling 'updateCatalogue'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateCatalogueInterceptors() -> [ServerInterceptor<Io_Pact_Plugin_Catalogue, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'compareContents'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCompareContentsInterceptors() -> [ServerInterceptor<Io_Pact_Plugin_CompareContentsRequest, Io_Pact_Plugin_CompareContentsResponse>]

  /// - Returns: Interceptors to use when handling 'configureInteraction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfigureInteractionInterceptors() -> [ServerInterceptor<Io_Pact_Plugin_ConfigureInteractionRequest, Io_Pact_Plugin_ConfigureInteractionResponse>]

  /// - Returns: Interceptors to use when handling 'generateContent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGenerateContentInterceptors() -> [ServerInterceptor<Io_Pact_Plugin_GenerateContentRequest, Io_Pact_Plugin_GenerateContentResponse>]

  /// - Returns: Interceptors to use when handling 'startMockServer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStartMockServerInterceptors() -> [ServerInterceptor<Io_Pact_Plugin_StartMockServerRequest, Io_Pact_Plugin_StartMockServerResponse>]

  /// - Returns: Interceptors to use when handling 'shutdownMockServer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeShutdownMockServerInterceptors() -> [ServerInterceptor<Io_Pact_Plugin_ShutdownMockServerRequest, Io_Pact_Plugin_ShutdownMockServerResponse>]

  /// - Returns: Interceptors to use when handling 'getMockServerResults'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMockServerResultsInterceptors() -> [ServerInterceptor<Io_Pact_Plugin_MockServerRequest, Io_Pact_Plugin_MockServerResults>]

  /// - Returns: Interceptors to use when handling 'prepareInteractionForVerification'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePrepareInteractionForVerificationInterceptors() -> [ServerInterceptor<Io_Pact_Plugin_VerificationPreparationRequest, Io_Pact_Plugin_VerificationPreparationResponse>]

  /// - Returns: Interceptors to use when handling 'verifyInteraction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVerifyInteractionInterceptors() -> [ServerInterceptor<Io_Pact_Plugin_VerifyInteractionRequest, Io_Pact_Plugin_VerifyInteractionResponse>]
}

public enum Io_Pact_Plugin_PactPluginServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "PactPlugin",
    fullName: "io.pact.plugin.PactPlugin",
    methods: [
      Io_Pact_Plugin_PactPluginServerMetadata.Methods.initPlugin,
      Io_Pact_Plugin_PactPluginServerMetadata.Methods.updateCatalogue,
      Io_Pact_Plugin_PactPluginServerMetadata.Methods.compareContents,
      Io_Pact_Plugin_PactPluginServerMetadata.Methods.configureInteraction,
      Io_Pact_Plugin_PactPluginServerMetadata.Methods.generateContent,
      Io_Pact_Plugin_PactPluginServerMetadata.Methods.startMockServer,
      Io_Pact_Plugin_PactPluginServerMetadata.Methods.shutdownMockServer,
      Io_Pact_Plugin_PactPluginServerMetadata.Methods.getMockServerResults,
      Io_Pact_Plugin_PactPluginServerMetadata.Methods.prepareInteractionForVerification,
      Io_Pact_Plugin_PactPluginServerMetadata.Methods.verifyInteraction,
    ]
  )

  public enum Methods {
    public static let initPlugin = GRPCMethodDescriptor(
      name: "InitPlugin",
      path: "/io.pact.plugin.PactPlugin/InitPlugin",
      type: GRPCCallType.unary
    )

    public static let updateCatalogue = GRPCMethodDescriptor(
      name: "UpdateCatalogue",
      path: "/io.pact.plugin.PactPlugin/UpdateCatalogue",
      type: GRPCCallType.unary
    )

    public static let compareContents = GRPCMethodDescriptor(
      name: "CompareContents",
      path: "/io.pact.plugin.PactPlugin/CompareContents",
      type: GRPCCallType.unary
    )

    public static let configureInteraction = GRPCMethodDescriptor(
      name: "ConfigureInteraction",
      path: "/io.pact.plugin.PactPlugin/ConfigureInteraction",
      type: GRPCCallType.unary
    )

    public static let generateContent = GRPCMethodDescriptor(
      name: "GenerateContent",
      path: "/io.pact.plugin.PactPlugin/GenerateContent",
      type: GRPCCallType.unary
    )

    public static let startMockServer = GRPCMethodDescriptor(
      name: "StartMockServer",
      path: "/io.pact.plugin.PactPlugin/StartMockServer",
      type: GRPCCallType.unary
    )

    public static let shutdownMockServer = GRPCMethodDescriptor(
      name: "ShutdownMockServer",
      path: "/io.pact.plugin.PactPlugin/ShutdownMockServer",
      type: GRPCCallType.unary
    )

    public static let getMockServerResults = GRPCMethodDescriptor(
      name: "GetMockServerResults",
      path: "/io.pact.plugin.PactPlugin/GetMockServerResults",
      type: GRPCCallType.unary
    )

    public static let prepareInteractionForVerification = GRPCMethodDescriptor(
      name: "PrepareInteractionForVerification",
      path: "/io.pact.plugin.PactPlugin/PrepareInteractionForVerification",
      type: GRPCCallType.unary
    )

    public static let verifyInteraction = GRPCMethodDescriptor(
      name: "VerifyInteraction",
      path: "/io.pact.plugin.PactPlugin/VerifyInteraction",
      type: GRPCCallType.unary
    )
  }
}
